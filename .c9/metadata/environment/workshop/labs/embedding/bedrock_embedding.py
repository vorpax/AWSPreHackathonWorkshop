{"filter":false,"title":"bedrock_embedding.py","tooltip":"/workshop/labs/embedding/bedrock_embedding.py","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["import json","import boto3","from numpy import dot","from numpy.linalg import norm",""],"id":1}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["def get_embedding(text):","    session = boto3.Session()","    bedrock = session.client(service_name='bedrock-runtime')","    ","    response = bedrock.invoke_model(","        body=json.dumps({ \"inputText\": text }), ","        modelId=\"amazon.titan-embed-text-v2:0\", ","        accept=\"application/json\",","        contentType=\"application/json\"","    )","    ","    response_body = json.loads(response['body'].read())","    return response_body['embedding']",""],"id":3}],[{"start":{"row":19,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":20,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":21,"column":0},"end":{"row":30,"column":0},"action":"insert","lines":["class EmbedItem:","    def __init__(self, text):","        self.text = text","        self.embedding = get_embedding(text)","","class ComparisonResult:","    def __init__(self, text, similarity):","        self.text = text","        self.similarity = similarity",""],"id":5}],[{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":31,"column":0},"end":{"row":34,"column":0},"action":"insert","lines":["def calculate_similarity(a, b): #See Cosine Similarity: https://en.wikipedia.org/wiki/Cosine_similarity","    return dot(a, b) / (norm(a) * norm(b))","",""],"id":7}],[{"start":{"row":34,"column":0},"end":{"row":42,"column":0},"action":"insert","lines":["#Build the list of embeddings to compare","items = []","","with open(\"items.txt\", \"r\") as f:","    text_items = f.read().splitlines()","","for text in text_items:","    items.append(EmbedItem(text))",""],"id":8}],[{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":43,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":44,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["for e1 in items:","    print(f\"Closest matches for '{e1.text}'\")","    print (\"----------------\")","    cosine_comparisons = []","    ","    for e2 in items:","        similarity_score = calculate_similarity(e1.embedding, e2.embedding)","        ","        cosine_comparisons.append(ComparisonResult(e2.text, similarity_score)) #save the comparisons to a list","        ","    cosine_comparisons.sort(key=lambda x: x.similarity, reverse=True) # list the closest matches first","    ","    for c in cosine_comparisons:","        print(\"%.6f\" % c.similarity, \"\\t\", c.text)","    ","    print()","",""],"id":10}]]},"ace":{"folds":[],"scrolltop":406,"scrollleft":0,"selection":{"start":{"row":61,"column":0},"end":{"row":61,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1737150329267,"hash":"c6d30735a89ccb6ea3aba9293fd9191bda6416e4"}