{"filter":false,"title":"image_insertion_app.py","tooltip":"/workshop/labs/image_insertion/image_insertion_app.py","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":30,"column":0},"action":"insert","lines":["import boto3","import json","import base64","from PIL import Image","from io import BytesIO","from random import randint","","","#get a BytesIO object from file bytes","def get_bytesio_from_bytes(image_bytes):","    image_io = BytesIO(image_bytes)","    return image_io","","","#get a base64-encoded PNG image from an Image object","def get_png_base64(image):","    png_io = BytesIO()","    image.save(png_io, format=\"PNG\")","    img_str = base64.b64encode(png_io.getvalue()).decode(\"utf-8\")","    return img_str","","","#get an Image object from file bytes","def get_image_from_bytes(image_bytes):","    ","    image_io = BytesIO(image_bytes)","    ","    image = Image.open(image_io)","    ","    return image",""],"id":1}],[{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":31,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["#Get an inpainting or outpainting mask for the provided dimensions","def get_mask_image_base64(target_width, target_height, position, inside_width, inside_height):","    ","    inside_color_value = (0, 0, 0) #inside is black - this is the masked area","    outside_color_value = (255, 255, 255)","    ","    mask_image = Image.new(\"RGB\", (target_width, target_height), outside_color_value)","    original_image_shape = Image.new(","        \"RGB\", (inside_width, inside_height), inside_color_value","    )","    mask_image.paste(original_image_shape, position)","    mask_image_base64 = get_png_base64(mask_image)","    ","    #mask_image.save(\"mask.png\") #uncomment this to see what the mask looks like","","    return mask_image_base64",""],"id":3}],[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":48,"column":0},"end":{"row":49,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":49,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["#get the stringified request body for the InvokeModel API call","def get_titan_image_insertion_request_body(prompt_content, input_image_bytes, insertion_position, insertion_dimensions):","","    original_image = get_image_from_bytes(input_image_bytes)","    ","    input_image_base64 = get_png_base64(original_image)","    ","    target_width, target_height = original_image.size","    ","    inside_width, inside_height = insertion_dimensions","    ","    mask_image_base64 = get_mask_image_base64(target_width, target_height, insertion_position, inside_width, inside_height)","    ","    body = { #create the JSON payload to pass to the InvokeModel API","        \"taskType\": \"INPAINTING\",","        \"inPaintingParams\": {","            \"image\": input_image_base64,","            \"maskImage\": mask_image_base64,","            \"text\": prompt_content,  # What to add to the image","        },","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,  # Number of variations to generate","            \"quality\": \"premium\",  # Allowed values are \"standard\" and \"premium\"","            \"height\": target_height,","            \"width\": target_width,","            \"cfgScale\": 8.0,","            \"seed\": randint(0, 100000),  # Change the seed to generate different content","        },","    }","    ","    return json.dumps(body)",""],"id":5}],[{"start":{"row":80,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":81,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["",""]},{"start":{"row":82,"column":0},"end":{"row":83,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":82,"column":0},"end":{"row":118,"column":0},"action":"insert","lines":["#get a BytesIO object from the Titan Image Generator response","def get_titan_response_image(response):","","    response = json.loads(response.get('body').read())","    ","    images = response.get('images')","    ","    image_data = base64.b64decode(images[0])","","    return BytesIO(image_data)","","","#load the bytes from a file on disk","def get_bytes_from_file(file_path):","    with open(file_path, \"rb\") as image_file:","        file_bytes = image_file.read()","    return file_bytes","","","#generate an image using Amazon Titan Image Generator","def get_image_from_model(prompt_content, image_bytes, mask_prompt=None, negative_prompt=None, insertion_position=None, insertion_dimensions=None):","    session = boto3.Session()","","    bedrock = session.client(service_name='bedrock-runtime') #creates a Bedrock client","    ","    if image_bytes == None:","        image_bytes = get_bytes_from_file(\"images/desk.jpg\") #use desk.jpg if no file uploaded","    ","   ","    body = get_titan_image_insertion_request_body(prompt_content, image_bytes, insertion_position, insertion_dimensions) #preload desk.jpg","    ","    response = bedrock.invoke_model(body=body, modelId=\"amazon.titan-image-generator-v1\", contentType=\"application/json\", accept=\"application/json\")","    ","    output = get_titan_response_image(response)","    ","    return output",""],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":119,"column":0},"action":"remove","lines":["import boto3","import json","import base64","from PIL import Image","from io import BytesIO","from random import randint","","","#get a BytesIO object from file bytes","def get_bytesio_from_bytes(image_bytes):","    image_io = BytesIO(image_bytes)","    return image_io","","","#get a base64-encoded PNG image from an Image object","def get_png_base64(image):","    png_io = BytesIO()","    image.save(png_io, format=\"PNG\")","    img_str = base64.b64encode(png_io.getvalue()).decode(\"utf-8\")","    return img_str","","","#get an Image object from file bytes","def get_image_from_bytes(image_bytes):","    ","    image_io = BytesIO(image_bytes)","    ","    image = Image.open(image_io)","    ","    return image","","#Get an inpainting or outpainting mask for the provided dimensions","def get_mask_image_base64(target_width, target_height, position, inside_width, inside_height):","    ","    inside_color_value = (0, 0, 0) #inside is black - this is the masked area","    outside_color_value = (255, 255, 255)","    ","    mask_image = Image.new(\"RGB\", (target_width, target_height), outside_color_value)","    original_image_shape = Image.new(","        \"RGB\", (inside_width, inside_height), inside_color_value","    )","    mask_image.paste(original_image_shape, position)","    mask_image_base64 = get_png_base64(mask_image)","    ","    #mask_image.save(\"mask.png\") #uncomment this to see what the mask looks like","","    return mask_image_base64","","","#get the stringified request body for the InvokeModel API call","def get_titan_image_insertion_request_body(prompt_content, input_image_bytes, insertion_position, insertion_dimensions):","","    original_image = get_image_from_bytes(input_image_bytes)","    ","    input_image_base64 = get_png_base64(original_image)","    ","    target_width, target_height = original_image.size","    ","    inside_width, inside_height = insertion_dimensions","    ","    mask_image_base64 = get_mask_image_base64(target_width, target_height, insertion_position, inside_width, inside_height)","    ","    body = { #create the JSON payload to pass to the InvokeModel API","        \"taskType\": \"INPAINTING\",","        \"inPaintingParams\": {","            \"image\": input_image_base64,","            \"maskImage\": mask_image_base64,","            \"text\": prompt_content,  # What to add to the image","        },","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,  # Number of variations to generate","            \"quality\": \"premium\",  # Allowed values are \"standard\" and \"premium\"","            \"height\": target_height,","            \"width\": target_width,","            \"cfgScale\": 8.0,","            \"seed\": randint(0, 100000),  # Change the seed to generate different content","        },","    }","    ","    return json.dumps(body)","","","#get a BytesIO object from the Titan Image Generator response","def get_titan_response_image(response):","","    response = json.loads(response.get('body').read())","    ","    images = response.get('images')","    ","    image_data = base64.b64decode(images[0])","","    return BytesIO(image_data)","","","#load the bytes from a file on disk","def get_bytes_from_file(file_path):","    with open(file_path, \"rb\") as image_file:","        file_bytes = image_file.read()","    return file_bytes","","","#generate an image using Amazon Titan Image Generator","def get_image_from_model(prompt_content, image_bytes, mask_prompt=None, negative_prompt=None, insertion_position=None, insertion_dimensions=None):","    session = boto3.Session()","","    bedrock = session.client(service_name='bedrock-runtime') #creates a Bedrock client","    ","    if image_bytes == None:","        image_bytes = get_bytes_from_file(\"images/desk.jpg\") #use desk.jpg if no file uploaded","    ","   ","    body = get_titan_image_insertion_request_body(prompt_content, image_bytes, insertion_position, insertion_dimensions) #preload desk.jpg","    ","    response = bedrock.invoke_model(body=body, modelId=\"amazon.titan-image-generator-v1\", contentType=\"application/json\", accept=\"application/json\")","    ","    output = get_titan_response_image(response)","    ","    return output","",""],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["import streamlit as st","import image_insertion_lib as glib","","","st.set_page_config(layout=\"wide\", page_title=\"Image Insertion\")","","st.title(\"Image Insertion\")","","col1, col2, col3 = st.columns(3)","","placement_options_dict = { #Configure mask areas for image insertion","    \"Wall behind desk\": (3, 3, 506, 137), #x, y, width, height","    \"On top of desk\": (78, 60, 359, 115),","    \"Beneath desk\": (108, 237, 295, 239),","    \"Custom\": (0, 0, 200, 100), ","}","","placement_options = list(placement_options_dict)","","","with col1:","    st.subheader(\"Initial image\")","    ","    uploaded_file = st.file_uploader(\"Select an image (must be 512x512)\", type=['png', 'jpg'])","    ","    if uploaded_file:","        uploaded_image_preview = glib.get_bytesio_from_bytes(uploaded_file.getvalue())","        st.image(uploaded_image_preview)","    else:","        st.image(\"images/desk.jpg\")","    ","","with col2:","    st.subheader(\"Insertion parameters\")","    ","    placement_area = st.radio(\"Placement area:\", ","        placement_options,","    )","    ","    with st.expander(\"Custom:\", expanded=False):","        ","        mask_dimensions = placement_options_dict[placement_area]","    ","        mask_x = st.number_input(\"Mask x position\", value=mask_dimensions[0])","        mask_y = st.number_input(\"Mask y position\", value=mask_dimensions[1])","        mask_width = st.number_input(\"Mask width\", value=mask_dimensions[2])","        mask_height = st.number_input(\"Mask height\", value=mask_dimensions[3])","    ","    prompt_text = st.text_area(\"Object to add:\", height=100, help=\"The prompt text\")","    ","    generate_button = st.button(\"Generate\", type=\"primary\")","    ","","with col3:","    st.subheader(\"Result\")","","    if generate_button:","        with st.spinner(\"Drawing...\"):","            if uploaded_file:","                image_bytes = uploaded_file.getvalue()","            else:","                image_bytes = None","            ","            generated_image = glib.get_image_from_model(","                prompt_content=prompt_text, ","                image_bytes=image_bytes, ","                insertion_position=(mask_x, mask_y),","                insertion_dimensions=(mask_width, mask_height),","            )","        ","        st.image(generated_image)",""],"id":9}]]},"ace":{"folds":[],"scrolltop":945.5,"scrollleft":0,"selection":{"start":{"row":71,"column":0},"end":{"row":71,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":62,"state":"start","mode":"ace/mode/python"}},"timestamp":1737198475481,"hash":"6e706f46ba676c854253ef4497146356cf7752fd"}