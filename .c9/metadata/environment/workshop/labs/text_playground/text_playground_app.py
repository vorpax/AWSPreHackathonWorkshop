{"filter":false,"title":"text_playground_app.py","tooltip":"/workshop/labs/text_playground/text_playground_app.py","ace":{"folds":[],"scrolltop":368,"scrollleft":0,"selection":{"start":{"row":37,"column":0},"end":{"row":37,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/python"}},"hash":"d0f0aa48f4b246659f66a659dba2f04ad1fd7a70","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["import streamlit as st #all streamlit commands will be available through the \"st\" alias","import text_playground_lib as glib #reference to local lib script",""],"id":1}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["st.set_page_config(layout=\"wide\", page_title=\"Text Playground\") #set the page width wider to accommodate columns","","st.title(\"Text Playground\") #page title","","col1, col2 = st.columns(2) #create 2 columns",""],"id":3}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":9,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["with col1:","    input_text = st.text_area(\"Input text\", height=400) #display a multiline text box","    go_button = st.button(\"Go\", type=\"primary\") #display a primary button","            ","with col2:","    model = \"amazon.titan-text-express-v1\"","    ","    help_temperature = \"Modulates the probability density function for the next tokens, implementing the temperature sampling technique. This parameter can be used to deepen or flatten the density function curve. A lower value results in a steeper curve and more deterministic responses, whereas a higher value results in a flatter curve and more random responses. (float, defaults to 0, max value is 1.5)\"","    help_top_p = \"Top P controls token choices, based on the probability of the potential choices. If you set Top P below 1.0, the model considers only the most probable options and ignores less probable options. The result is more stable and repetitive completions.\"","    help_response_tokens = \"Configures the max number of tokens to use in the generated response. (int, defaults to 512)\"","    help_stop_sequences = \"Number of pipe symbols to use for a stop sequence.\"","    ","    titan_temperature = st.slider(\"Temperature\", min_value=0.0, max_value=1.0, value=0.0, step=0.1, help=help_temperature, format='%.1f')","    titan_top_p = st.slider(\"Top P\", min_value=0.1, max_value=1.0, value=0.9, step=0.1, help=help_top_p, format='%.1f')","    titan_max_token_count = st.slider(\"Response tokens\", min_value=1, max_value=4096, value=512, step=1, help=help_response_tokens)",""],"id":5}],[{"start":{"row":24,"column":0},"end":{"row":25,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":25,"column":0},"end":{"row":26,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":26,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["if go_button: #code in this if block will be run when the button is clicked","","    with st.spinner(\"Working...\"): #show a spinner while the code in this with block runs","        response_content = glib.get_text_response( #call the model through the supporting library","            model=model,","            input_content=input_text, ","            temperature=titan_temperature, ","            top_p=titan_top_p, ","            max_token_count=titan_max_token_count) ","","        st.write(response_content) #display the response content",""],"id":7}]]},"timestamp":1737207925759}